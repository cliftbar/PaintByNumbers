package pbn

import (
	"fmt"
	gcl "github.com/cdipaolo/goml/cluster"
	"github.com/disintegration/imaging"
	"github.com/go-echarts/go-echarts/v2/charts"
	"github.com/go-echarts/go-echarts/v2/opts"
	clf "github.com/lucasb-eyer/go-colorful"
	"github.com/muesli/clusters"
	km "github.com/muesli/kmeans"
	"image"
	cl "image/color"
	_ "image/jpeg"
	_ "image/png"
	"math"
	"os"
	"path/filepath"
)

func LoadImage(imgPath string) image.Image {
	//existingImageFile, err := os.Open(filepath.Clean(imgPath))
	//if err != nil {
	//	panic(err)
	//}
	//defer existingImageFile.Close()

	//imageData, _, err := image.Decode(existingImageFile)
	imageData, err := imaging.Open(filepath.Clean(imgPath), imaging.AutoOrientation(true))
	if err != nil {
		panic(err)
	}

	return imageData
}

func PlotColorPalette(data []opts.BarData) {
	// create a new bar instance
	bar := charts.NewBar()
	// set some global options like Title/Legend/ToolTip or anything else
	bar.SetGlobalOptions(charts.WithTitleOpts(opts.Title{
		Title:    "My first bar chart generated by go-echarts",
		Subtitle: "It's extremely easy to use, right?",
	}))

	axisX := make([]string, len(data))
	for i := 0; i < len(data); i++ {
		axisX = append(axisX, string(rune(i)))
	}
	// Put data into instance
	bar.SetXAxis(axisX).AddSeries("colors", data)
	// Where the magic happens
	f, _ := os.Create("bar.html")
	bar.Render(f)
}

// DominantColors cluster default: 5, deltaThreshold .01
func DominantColors(img image.Image, clusterCount int, deltaThreshold float64, doPlot bool) []clf.Color {
	var obs clusters.Observations

	for x := 0; x < img.Bounds().Size().X; x++ {
		for y := 0; y < img.Bounds().Size().Y; y++ {
			r, g, b, _ := img.At(x, y).RGBA()
			obs = append(obs, clusters.Coordinates{
				float64(r) / 255.0, float64(g) / 255.0, float64(b) / 255.0,
			})
		}
	}

	//rand.Seed(time.Now().UnixNano())
	//rand.Shuffle(len(obs), func(i, j int) { obs[i], obs[j] = obs[j], obs[i] })

	kmm, _ := km.NewWithOptions(deltaThreshold, nil)
	centroidColors, err := kmm.Partition(obs, clusterCount)
	if err != nil {
		panic(err)
	}

	if doPlot {
		total := float32(img.Bounds().Size().X * img.Bounds().Size().Y)
		items := make([]opts.BarData, 0)
		for _, centroid := range centroidColors {
			pct := float32(len(centroid.Observations)) / total * 100.0

			c := clf.Color{
				R: centroid.Center[0] / 255.0,
				G: centroid.Center[1] / 255.0,
				B: centroid.Center[2] / 255.0,
			}
			style := opts.ItemStyle{
				Color:       c.Hex(),
				Color0:      c.Hex(),
				BorderColor: c.Hex(),
			}
			items = append(items, opts.BarData{Value: pct, ItemStyle: &style})
		}

		PlotColorPalette(items)
	}

	colorPalette := make([]clf.Color, 0)

	for _, centroid := range centroidColors {
		colorPalette = append(colorPalette, clf.Color{
			R: centroid.Center[0] / 255.0,
			G: centroid.Center[1] / 255.0,
			B: centroid.Center[2] / 255.0,
		})
	}

	return colorPalette
}

// DominantColorsAlt cluster default: 5, deltaThreshold .01
func DominantColorsAlt(img image.Image, clusterCount int, iterations int) []clf.Color {
	var obs [][]float64

	for x := 0; x < img.Bounds().Size().X; x++ {
		for y := 0; y < img.Bounds().Size().Y; y++ {
			r, g, b, _ := img.At(x, y).RGBA()
			obs = append(obs, []float64{
				float64(r) / 255.0, float64(g) / 255.0, float64(b) / 255.0,
			})
		}
	}

	model := gcl.NewKMeans(clusterCount, iterations, obs)
	if model.Learn() != nil {
		panic("kmeans error")
	}

	fmt.Println(model.Centroids)

	colorPalette := make([]clf.Color, 0)

	for _, centroid := range model.Centroids {
		colorPalette = append(colorPalette, clf.Color{
			R: centroid[0] / 255.0,
			G: centroid[1] / 255.0,
			B: centroid[2] / 255.0,
		})
	}

	return colorPalette
}

func SnapColors(img image.Image, colorPalette []clf.Color) *image.RGBA {
	outputImg := image.NewRGBA(img.Bounds())

	for x := 0; x < img.Bounds().Size().X; x++ {
		for y := 0; y < img.Bounds().Size().Y; y++ {
			minDistE := math.MaxFloat64

			pixelColor := img.At(x, y)
			pcc, _ := clf.MakeColor(pixelColor)
			for _, snapColor := range colorPalette {
				e := snapColor.DistanceCIEDE2000(pcc)
				if e < minDistE {
					minDistE = e
					r255, g255, b255 := snapColor.RGB255()
					color255 := cl.RGBA{
						R: r255,
						G: g255,
						B: b255,
						A: 255,
					}
					outputImg.Set(x, y, color255)
				}
			}
		}
	}

	return outputImg

}
